---
import { colorCategoryTree } from "../libs/prompts-store";
import { getKeys } from "../libs/util";
import ColorMarker from "./ColorMarker.astro";
import PromptButton from "./PromptButton.astro";
---

{
  getKeys(colorCategoryTree).map((colorCategory) => (
    <dialog
      is="modal-window"
      class={`modal ${colorCategory}`}
      data-color-category={colorCategory}
    >
      <div class="color-buttons-wrapper">
        {colorCategoryTree[colorCategory].map(({ prompt, colorName }) => (
          <PromptButton prompt={prompt}>
            <p class="marker-and-prompt-wrapper">
              <ColorMarker colorName={colorName} />
              <span>{prompt}</span>
            </p>
          </PromptButton>
        ))}
      </div>
      <button class="done">Done</button>
    </dialog>
  ))
}

<script>
  import { modalEnableStore } from "../libs/modal-store";
  import type { ColorCategory } from "../libs/prompts-store";

  class ModalWindow extends HTMLDialogElement {
    constructor() {
      super();

      const done = this.querySelector(`.done`);
      if (!done) throw new Error("`.done` is not found!!");

      done.addEventListener(`click`, () => {
        this.close();
      });

      this.addEventListener(`close`, () => {
        modalEnableStore.setKey(colorCategory, false);
      });

      const colorCategory = this.dataset.colorCategory as ColorCategory;

      modalEnableStore.subscribe((modalEnable) => {
        if (modalEnable[colorCategory]) {
          this.showModal();
        } else {
          this.close();
        }
      });
    }
  }
  customElements.define(`modal-window`, ModalWindow, { extends: `dialog` });
</script>

<style>
  .modal {
    margin: auto;
  }

  .modal[open] {
    width: 100%;
    max-width: 720px;
    background-color: rgb(var(--background-sub));
    border: solid 3px rgb(var(--text-main));
    border-radius: 1rem;
    padding: 1rem;
    box-shadow: 0 0 1rem rgb(var(--accent-light));

    max-height: 100%;
    overflow: auto;

    display: flex;
    flex-flow: column nowrap;
    gap: 1rem;
    align-items: center;
  }

  .modal::backdrop {
    background-color: rgb(0 0 0 / 0.3);
  }

  .color-buttons-wrapper {
    width: 100%;
    display: grid;
    gap: 0.5rem;
    grid-template-columns: repeat(auto-fit, minmax(6rem, 1fr));
    grid-auto-flow: row dense;
  }

  .marker-and-prompt-wrapper {
    display: flex;
    flex-flow: column nowrap;
    gap: 0.5rem;
    align-items: center;
  }

  .done {
    font-size: 1.2rem;
    border: solid 3px rgb(var(--text-main));
    border-radius: 9999rem;
    padding: 1rem 3rem;
    cursor: pointer;
    transition-duration: 200ms;
  }
  .done:hover {
    border-color: rgb(var(--accent));
  }
</style>

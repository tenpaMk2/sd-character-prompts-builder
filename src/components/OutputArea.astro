---
import { allCategories } from "../libs/prompts-store";
import SliderButton from "./SliderButton.astro";

const n = allCategories.length;
const colorsMap = new Map(
  allCategories.map((c, index) => [
    c,
    `hsl(${
      (360 * index) / (2 * n) + (index % 2 === 0 ? 0 : 180)
    }deg 100% 50% / 30%)`,
  ]),
);
---

<section class="flex-column">
  <header>
    <h2>å‡ºåŠ›</h2>
  </header>
  <div class="flex-column">
    <div class="flex-row">
      <p>1è¡Œå‡ºåŠ›</p>
      <SliderButton key="oneLine" />
    </div>
  </div>
  <div class="flex-row">
    <pre
      id="prompts-output">{allCategories.map((category) => 
        (<code class={category} style={`background-color:${colorsMap.get(category)}`} /><br class="line-break" />)
        )}</pre>
    <button id="prompts-copy-button">ðŸ“‹</button>
  </div>
</section>

<script>
  import {
    allCategories,
    promptEnableInfoStore,
    promptDefines,
  } from "../libs/prompts-store";
  import { sliderButtonStoreMap } from "../libs/slider-button-store";
  import { computed } from "nanostores";

  const oneLineStore = sliderButtonStoreMap.get(`oneLine`)!;

  const outputMaterials = computed(
    [oneLineStore, promptEnableInfoStore],
    (isOneLine, promptEnableInfo) => ({
      isOneLine,
      promptEnableInfo,
    }),
  );

  outputMaterials.subscribe(({ isOneLine, promptEnableInfo }) => {
    for (const category of allCategories) {
      const categoryMatches = promptDefines.filter(
        ({ category: c }) => c === category,
      );
      const resultPrompts = categoryMatches
        .map(({ key, prompt }) => (promptEnableInfo[key] ? `${prompt}, ` : ``))
        .join(``);

      const code = document.querySelector(`#prompts-output > .${category}`)!;
      code.textContent = resultPrompts;
    }

    const brs: NodeListOf<HTMLBRElement> = document.querySelectorAll(
      `#prompts-output > .line-break`,
    );
    for (const br of brs) {
      br.style.display = isOneLine ? `none` : `unset`;
    }
  });

  const button = document.querySelector(
    `#prompts-copy-button`,
  )! as HTMLButtonElement;
  const pre = document.querySelector(`#prompts-output`)! as HTMLPreElement;

  button.addEventListener(`click`, () => {
    navigator.clipboard.writeText(pre.textContent!);
    button.classList.add(`transition`);
  });
  button.addEventListener(`transitioncancel`, () =>
    button.classList.remove(`transition`),
  );
  button.addEventListener(`transitionend`, () =>
    button.classList.remove(`transition`),
  );
</script>

<style>
  .flex-row {
    display: flex;
    flex-flow: row nowrap;
    gap: 1rem;
    align-items: center;
  }

  .flex-column {
    display: flex;
    flex-flow: column nowrap;
    gap: 1rem;
  }

  section {
    background-color: rgb(var(--background-sub));
    border-radius: 1rem;
    padding: 1rem;
  }

  h2 {
    font-size: 1.5rem;
  }

  pre {
    background-color: rgb(10% 10% 10%);
    border-radius: 1rem;
    padding: 1rem;
    white-space: pre-wrap;
    flex: 1 1 0;
  }

  button {
    flex: 0 0 3rem;
    aspect-ratio: 1 / 1;
    border-radius: 9999px;
    cursor: pointer;
    font-size: 1.5rem;
    transition-duration: 200ms;
    rotate: 0deg;
  }

  .transition {
    rotate: 360deg;
  }
</style>

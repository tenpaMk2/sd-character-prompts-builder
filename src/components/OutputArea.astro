---
import { allCategories } from "../libs/prompts-store";
import SliderButton from "./SliderButton.astro";
import Button from "./Button.astro";

const n = allCategories.length;
const categoryInfo = new Map(
  allCategories.map((c, index) => [
    c,
    {
      className: c.replace(` `, `-`),
      color: `hsl(${
        (360 * index) / (2 * n) + (index % 2 === 0 ? 0 : 180)
      }deg 100% 50% / 30%)`,
    },
  ]),
);
---

<section is="output-area" class="flex-column">
  <header>
    <h2>å‡ºåŠ›</h2>
  </header>
  <div class="flex-column">
    <div class="flex-row">
      <p>1è¡Œå‡ºåŠ›</p>
      <SliderButton id="one-line-mode-button" />
    </div>
  </div>
  <div class="flex-row">
    <pre
      id="prompts-output">{allCategories.map((category) =>
      (<code class={categoryInfo.get(category)?.className} style={`background-color:${categoryInfo.get(category)?.color}`} /><br class="line-break" />))
        }</pre>
    <Button id="prompts-copy-button" class="clipboard-button">
      <span>ðŸ“‹</span>
    </Button>
  </div>
</section>

<script>
  import { atom, computed } from "nanostores";
  import {
    allCategories,
    promptEnableInfoStore,
    queryAllPromptsByCategory,
  } from "../libs/prompts-store";

  class OutputArea extends HTMLElement {
    constructor() {
      super();

      // Setup output prompts area.

      const oneLineInput: HTMLInputElement | null = this.querySelector(
        `#one-line-mode-button > input`,
      );
      if (!oneLineInput)
        throw new Error("`#one-line-mode-button > input` is not found!!");

      const isOneLineModeStore = atom(oneLineInput.checked);

      oneLineInput.addEventListener(`change`, () =>
        isOneLineModeStore.set(oneLineInput.checked),
      );

      const promptsOutputMaterial = computed(
        [promptEnableInfoStore, isOneLineModeStore],
        (promptEnableInfo, isOneLineMode) => ({
          promptEnableInfo,
          isOneLineMode,
        }),
      );
      promptsOutputMaterial.subscribe(({ promptEnableInfo, isOneLineMode }) => {
        for (const category of allCategories) {
          const allPrompts = queryAllPromptsByCategory(category);
          const categoryOutputs = allPrompts
            .map((prompt) => (promptEnableInfo[prompt] ? `${prompt}, ` : ``))
            .join(``);

          const code = this.querySelector(`#prompts-output > .${category}`)!;
          code.textContent = categoryOutputs;
        }

        const brs: NodeListOf<HTMLBRElement> = this.querySelectorAll(
          `#prompts-output > .line-break`,
        );
        for (const br of brs) {
          br.style.display = isOneLineMode ? `none` : `unset`;
        }
      });

      // Setup copy button.

      const copyButton: HTMLButtonElement | null =
        this.querySelector(`#prompts-copy-button`);
      if (!copyButton)
        throw new Error("`#prompts-copy-button` is not found !!");

      const promptsOutput: HTMLPreElement | null =
        this.querySelector(`#prompts-output`);
      if (!promptsOutput) throw new Error("`#prompts-output` is not found !!");

      copyButton.addEventListener(`click`, () => {
        navigator.clipboard.writeText(promptsOutput.innerText);
      });
    }
  }
  customElements.define(`output-area`, OutputArea, { extends: `section` });
</script>

<style>
  .flex-row {
    display: flex;
    flex-flow: row nowrap;
    gap: 1rem;
    align-items: center;
  }

  .flex-column {
    display: flex;
    flex-flow: column nowrap;
    gap: 1rem;
  }

  section[is="output-area"] {
    background-color: rgb(var(--background-sub));
    border-radius: 1rem;
    padding: 1rem;
  }

  h2 {
    font-size: 1.5rem;
  }

  pre {
    background-color: rgb(10% 10% 10%);
    border-radius: 1rem;
    padding: 1rem;
    white-space: pre-wrap;
    flex: 1 1 0;
  }

  #prompts-copy-button > span {
    font-size: 1.5rem;
    width: 2rem;
    height: 2rem;

    display: flex;
    justify-content: center;
    align-items: center;
  }
</style>

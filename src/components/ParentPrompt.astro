---
import {
  type Prompt,
  type Category,
  queryChildren,
} from "../libs/prompts-store";
import ColorButton from "./ColorButton.astro";
import PromptButton from "./PromptButton.astro";

interface Props {
  category: Category;
  parentPrompt: Prompt;
}

const { category, parentPrompt } = Astro.props;

const childLeafs = queryChildren(category, parentPrompt);
---

<parent-prompt data-category={category} data-parent={parentPrompt}>
  <button class="bar">
    <div class="bar-icon">
      <svg
        viewBox="0 0 16 16"
        data-name="Line Color"
        xmlns="http://www.w3.org/2000/svg"
      >
        <g
          stroke="rgb(var(--text-main))"
          fill="none"
          stroke-width="1"
          stroke-linecap="round"
          stroke-linejoin="round"
        >
          <polygon points="12 8 6 12 6 4"></polygon>
        </g>
      </svg>
    </div>
    <span class="bar-text">{parentPrompt}</span>
  </button>
  <div class="prompts-container hide">
    {
      childLeafs.map((leaf) => {
        switch (leaf.type) {
          case `parent-prompt`:
            return (
              <Astro.self category={category} parentPrompt={leaf.prompt} />
            );
          case `color-parent`:
            return <ColorButton colorCategory={leaf.colorCategory} />;
          case `child-prompt`:
            return (
              <PromptButton prompt={leaf.prompt}>{leaf.prompt}</PromptButton>
            );
        }
      })
    }
  </div>
</parent-prompt>

<script>
  import {
    promptEnableInfoStore,
    type Prompt,
    queryChildren,
    type Category,
    type UILeaf,
    colorCategoryTree,
  } from "../libs/prompts-store";

  class ParentPrompt extends HTMLElement {
    constructor() {
      super();

      const category = this.dataset.category as Category;
      const parentPrompt = this.dataset.parent as Prompt;

      const bar = this.querySelector(`button`);
      if (!bar) throw new Error("`button` is not found!!");

      bar.addEventListener(`click`, () => {
        const isEnable = promptEnableInfoStore.get()[parentPrompt];
        promptEnableInfoStore.setKey(parentPrompt, !isEnable);
      });

      promptEnableInfoStore.subscribe((info) => {
        const isEnable = info[parentPrompt];
        if (isEnable) {
          this.classList.add(`opening`);
        } else {
          this.classList.remove(`opening`);

          const disableRecursively = (leaf: UILeaf) => {
            switch (leaf.type) {
              case `parent-prompt`:
                promptEnableInfoStore.setKey(leaf.prompt, false);
                leaf.children.forEach(disableRecursively);
                return;
              case `child-prompt`:
                promptEnableInfoStore.setKey(leaf.prompt, false);
                return;
              case `color-parent`:
                for (const { prompt } of colorCategoryTree[
                  leaf.colorCategory
                ]) {
                  promptEnableInfoStore.setKey(prompt, false);
                }
                return;
            }
          };
          const children = queryChildren(category, parentPrompt);
          children.forEach(disableRecursively);
        }
      });
    }
  }

  customElements.define(`parent-prompt`, ParentPrompt);
</script>

<style>
  parent-prompt {
    border: solid 1px rgb(var(--text-main));
    border-radius: 0.5rem;
    overflow: hidden;

    grid-column: span 3;

    display: flex;
    flex-flow: column nowrap;
    gap: 0;
  }

  button {
    border: none;
    background-color: transparent;
    cursor: pointer;
    outline: none;
    appearance: none;
    color: inherit;
  }

  .bar {
    font-size: 1rem;
    padding: 0.5rem;
    width: 100%;
    height: 100%;
    background-color: rgb(100% 100% 100% / 0.1);

    display: grid;
    gap: 0.5rem;
    grid-template-columns: min-content 1fr;
    grid-auto-flow: row;
    align-items: center;
  }

  .bar-icon {
    width: 2rem;
    aspect-ratio: 1 / 1;
    border: solid 1px;
    border-radius: 9999rem;
    overflow: hidden;

    display: flex;
    justify-content: center;
    align-items: center;

    transition-duration: 200ms;
  }

  .opening {
    grid-row: span 3;
  }

  .opening > .bar {
    height: auto;
    background-color: rgb(var(--accent));
    color: rgb(var(--text-main));
    border-bottom: solid 1px rgb(var(--text-main));
  }
  .opening > .bar > .bar-icon {
    rotate: 0.25turn;
  }
  .opening > .prompts-container {
    padding: 0.5rem;

    display: grid;
    gap: 0.5rem;
    grid-template-columns: repeat(auto-fit, minmax(10rem, 1fr));
    grid-auto-flow: row dense;
  }

  .hide {
    display: none;
  }
</style>

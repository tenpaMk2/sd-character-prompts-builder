---
import { type ColorCategory, colorCategoryTree } from "../libs/prompts-store";
import ColorMarker from "./ColorMarker.astro";

interface Props {
  colorCategory: ColorCategory;
}

const { colorCategory } = Astro.props;
---

<button is="color-button" data-color-category={colorCategory}>
  <div class="markers-wrapper">
    <div class={`marker-wrapper none`}>
      <ColorMarker colorName="none" />
    </div>
    {
      colorCategoryTree[colorCategory].map(({ colorName }) => (
        <div class={`marker-wrapper ${colorName} hide`}>
          <ColorMarker colorName={colorName} />
        </div>
      ))
    }
  </div>
  <p>{colorCategory}</p>
</button>

<script>
  import { modalEnableStore } from "../libs/modal-store";
  import {
    promptEnableInfoStore,
    type ColorCategory,
    colorCategoryTree,
  } from "../libs/prompts-store";

  class ColorButton extends HTMLButtonElement {
    constructor() {
      super();

      const colorCategory = this.dataset.colorCategory as ColorCategory;

      promptEnableInfoStore.subscribe((promptEnableInfo) => {
        for (const { prompt, colorName } of colorCategoryTree[colorCategory]) {
          const isEnable = promptEnableInfo[prompt];
          const colorWrapper = this.querySelector(
            `.marker-wrapper.${colorName}`,
          )!;

          if (isEnable) {
            colorWrapper.classList.remove(`hide`);
          } else {
            colorWrapper.classList.add(`hide`);
          }
        }

        const hasAnyEnable = colorCategoryTree[colorCategory].some(
          ({ prompt }) => promptEnableInfo[prompt],
        );

        // Control highlight of the color button.
        if (hasAnyEnable) {
          this.classList.add(`enable`);
        } else {
          this.classList.remove(`enable`);
        }

        // Control none marker.
        const noneWrapper = this.querySelector(`.marker-wrapper.none`);
        if (!noneWrapper)
          throw new Error("`.marker-wrapper.none` is not found!!");

        if (hasAnyEnable) {
          noneWrapper.classList.add(`hide`);
        } else {
          noneWrapper.classList.remove(`hide`);
        }
      });

      this.addEventListener(`click`, () =>
        modalEnableStore.setKey(colorCategory, true),
      );
    }
  }
  customElements.define(`color-button`, ColorButton, { extends: `button` });
</script>

<style>
  button {
    font-size: 1rem;
    border-radius: 0.5rem;
    border: solid 1px rgb(var(--text-main));
    padding: 0.4rem;
    width: 100%;

    cursor: pointer;
    background-color: transparent;
    outline: none;
    appearance: none;
    color: inherit;
    border-color: rgb(var(--text-main));

    display: flex;
    flex-flow: column nowrap;
    gap: 0.5rem;
    align-items: center;
  }

  .modal {
    background-color: rgb(0 0 0 / 0.3);
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    padding: 1rem;

    z-index: 1;

    display: flex;
    justify-content: center;
    align-items: center;
  }

  .modal-content {
    width: 100%;
    max-width: 720px;
    background-color: rgb(var(--background-sub));
    border-radius: 1rem;
    padding: 1rem;
    box-shadow: 0 0 1rem rgb(var(--accent-light));

    max-height: 100%;
    overflow: auto;

    display: flex;
    flex-flow: column nowrap;
    gap: 1rem;
    align-items: center;
  }

  .color-buttons-wrapper {
    width: 100%;
    display: grid;
    gap: 0.5rem;
    grid-template-columns: repeat(auto-fit, minmax(6rem, 1fr));
    grid-auto-flow: row dense;
  }

  .done {
    font-size: larger;
    background-color: transparent;
    border: solid 1px rgb(var(--text-main));
    border-radius: 1rem;
    width: min-content;
    padding: 1rem 3rem;
  }

  .marker-and-prompt-wrapper {
    display: flex;
    flex-flow: column nowrap;
    gap: 0.5rem;
    align-items: center;
  }

  .markers-wrapper {
    display: flex;
    flex-flow: row wrap;
    gap: 0.3rem;
    justify-content: center;
  }
  .marker-wrapper {
    display: inline-block;
  }

  .enable {
    background: rgb(var(--accent));
    border-color: rgb(var(--accent-dark));
  }

  .hide {
    display: none;
  }
</style>

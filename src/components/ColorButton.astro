---
import {
  getDefinesByColorCategory,
  type ColorCategory,
} from "../libs/prompts-store";
import ColorMarker from "./ColorMarker.astro";
import PromptButton from "./PromptButton.astro";

interface Props {
  colorCategory: ColorCategory;
}

const { colorCategory } = Astro.props;

const colorCategoryDefines = getDefinesByColorCategory(colorCategory);
---

<button is="color-button" data-color-category={colorCategory}>
  {colorCategory}
</button>
<div class="modal hide">
  <div class="modal-content">
    <div class="color-buttons-wrapper">
      {
        colorCategoryDefines.map(({ prompt, color }) => (
          <PromptButton prompt={prompt}>
            <p class="marker-and-prompt-wrapper">
              <ColorMarker colorName={color!} />
              <span>{prompt}</span>
            </p>
          </PromptButton>
        ))
      }
    </div>
    <button class="done">Done</button>
  </div>
</div>

<script>
  const modal = document.querySelector(`.modal`)!;

  class ColorButton extends HTMLButtonElement {
    constructor() {
      super();

      this.addEventListener(`click`, () => {
        modal.classList.remove(`hide`);
      });
    }
  }

  customElements.define(`color-button`, ColorButton, { extends: `button` });

  const done = document.querySelector(`.done`)!;
  done.addEventListener(`click`, () => {
    modal.classList.add(`hide`);
  });
</script>

<style>
  button {
    font-size: 1rem;
    border-radius: 0.5rem;
    border: none;
    padding: 0.4rem;
    cursor: pointer;
    background-color: transparent;
    outline: none;
    appearance: none;
    color: inherit;
    border-color: rgb(var(--text-main));
    width: 100%;
  }

  .modal {
    background-color: rgb(0 0 0 / 0.3);
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    padding: 1rem;

    z-index: 1;

    display: flex;
    justify-content: center;
    align-items: center;
  }

  .modal-content {
    width: 100%;
    max-width: 720px;
    background-color: rgb(var(--background-sub));
    border-radius: 1rem;
    padding: 1rem;
    box-shadow: 0 0 1rem rgb(var(--accent-light));

    max-height: 100%;
    overflow: auto;

    display: flex;
    flex-flow: column nowrap;
    gap: 1rem;
    align-items: center;
  }

  .color-buttons-wrapper {
    width: 100%;
    display: grid;
    gap: 0.5rem;
    grid-template-columns: repeat(auto-fit, minmax(6rem, 1fr));
    grid-auto-flow: row dense;
  }

  .hide {
    display: none;
  }

  .done {
    font-size: larger;
    background-color: transparent;
    border: solid 1px rgb(var(--text-main));
    border-radius: 1rem;
    width: min-content;
    padding: 1rem 3rem;
  }

  .marker-and-prompt-wrapper {
    display: flex;
    flex-flow: column nowrap;
    gap: 0.5rem;
    align-items: center;
  }
</style>

---
import {
  type Category,
  getDefinesByCategory,
  getDefinesHaveChildren,
  type Prompt,
  type ColorCategory,
  getDefinesHaveParent,
} from "../libs/prompts-store";
import ParentPrompt from "./ParentPrompt.astro";
import PromptButton from "./PromptButton.astro";
import ColorButton from "./ColorButton.astro";

interface Props {
  name: string;
  category: Category;
}

const { name, category } = Astro.props;

const categoryDefines = getDefinesByCategory(category);
const parentDefines = getDefinesHaveChildren();
const childDefines = getDefinesHaveParent();

type CellInfo =
  | {
      readonly type: `color`;
      readonly argument: ColorCategory;
    }
  | {
      readonly type: `parent` | `normal`;
      readonly argument: Prompt;
    };

const mapInput = categoryDefines.map((def) => {
  if (def.colorCategory) {
    return [
      def.colorCategory,
      {
        type: `color`,
        argument: def.colorCategory,
      },
    ];
  }

  if (parentDefines.includes(def)) {
    return [
      def.prompt,
      {
        type: `parent`,
        argument: def.prompt,
      },
    ];
  }

  if (childDefines.includes(def)) return null;

  return [
    def.prompt,
    {
      type: `normal`,
      argument: def.prompt,
    },
  ];
});

const cellMap: ReadonlyMap<ColorCategory | Prompt, CellInfo> = new Map(
  mapInput.filter((x) => x) as Iterable<[ColorCategory | Prompt, CellInfo]>,
);
---

<category-area data-category={category}>
  <header>
    <h2>{name}</h2>
    <button class="clear-button" type="button">Clear</button>
  </header>
  <div class="prompts">
    {
      [...cellMap].map(([, { type, argument }]) => {
        console.log(type, argument);
        switch (type) {
          case `color`:
            return <ColorButton colorCategory={argument as ColorCategory} />;
          case `parent`:
            return <ParentPrompt parentPrompt={argument as Prompt} />;
          case `normal`:
            return (
              <PromptButton prompt={argument as Prompt}>
                {argument}
              </PromptButton>
            );
        }
      })
    }
  </div>
  <div class="mupltiple-enables-warning hide">
    <p>
      2個以上のpromptが有効になっています。意図したものであればこの警告は無視してください。
    </p>
  </div>
</category-area>

<script>
  import {
    promptEnableInfoStore,
    type Category,
    getDefinesByCategory,
  } from "../libs/prompts-store";

  class CategoryArea extends HTMLElement {
    constructor() {
      super();

      const category = this.dataset.category as Category;
      if (!category) return;

      const clearButton = this.querySelector(
        `:scope > header > .clear-button`,
      )!;

      clearButton.addEventListener(`click`, () => {
        const categoryDefines = getDefinesByCategory(category);
        for (const { prompt } of categoryDefines) {
          promptEnableInfoStore.setKey(prompt, false);
        }
      });

      const multipleEnablesWarning = this.querySelector(
        `:scope > .mupltiple-enables-warning`,
      )!;

      // Emit warning when multiple prompts are enable in same category.
      promptEnableInfoStore.subscribe((info) => {
        const categoryDefines = getDefinesByCategory(category);
        const isEnables = categoryDefines.map(({ prompt }) => info[prompt]);
        const enableCount = isEnables.filter((isEnable) => isEnable).length;

        if (2 <= enableCount) {
          multipleEnablesWarning.classList.remove(`hide`);
        } else {
          multipleEnablesWarning.classList.add(`hide`);
        }
      });
    }
  }

  customElements.define(`category-area`, CategoryArea);
</script>

<style>
  category-area {
    padding: 1rem;
    background-color: rgb(var(--background-sub));
    border-radius: 1rem;
    display: flex;
    flex-flow: column nowrap;
    gap: 0.8rem;
  }

  .prompts {
    display: grid;
    gap: 0.5rem;
    grid-template-columns: repeat(auto-fit, minmax(4rem, 1fr));
    grid-auto-flow: row dense;
  }

  header {
    display: flex;
    flex-flow: row wrap;
    gap: 1rem;
  }

  h2 {
    font-size: 1.5rem;
  }

  button {
    padding: 0.4rem;
    border-radius: 9999px;
  }

  .mupltiple-enables-warning {
    display: flex;
    flex-flow: row nowrap;
    gap: 0.5rem;
    align-items: center;
    border-radius: 1rem;
    background-color: hsl(40deg 100% 50% / 40%);
    padding: 0.5rem;
  }

  .mupltiple-enables-warning::before {
    content: "!";
    display: inline-flex;
    border: 1px solid rgb(var(--text-main));
    border-radius: 9999px;
    aspect-ratio: 1/1;
    justify-content: center;
    align-items: center;
    flex: 0 0 2rem;
    font-size: 1.2rem;
  }

  .mupltiple-enables-warning > p {
    flex: 1 1 0;
  }

  .hide {
    display: none;
  }
</style>

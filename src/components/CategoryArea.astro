---
import { type Category, promptStates } from "../store";
import PromptButton from "./PromptButton.astro";
interface Props {
  name: string;
  key: Category;
}

const { name, key } = Astro.props;

const categoryFiltered = promptStates
  .get()
  .filter(({ category }) => category === key);
const prompts = categoryFiltered.map(({ prompt }) => prompt);
---

<category-area data-key={key}>
  <header>
    <h2>{name}</h2>
    <button class="clear-button" type="button">Clear</button>
  </header>
  <div class="prompts">
    {prompts.map((prompt) => <PromptButton key={prompt} />)}
  </div>
</category-area>

<script>
  import { promptStates, type Category } from "../store";

  class CategoryArea extends HTMLElement {
    constructor() {
      super();

      const key = this.dataset.key as Category;
      if (!key) return;

      const clearButton = this.querySelector(
        `:scope > header > .clear-button`,
      )!;

      clearButton.addEventListener(`click`, () => {
        const all = promptStates.get();
        const categoryMatches = all.filter(({ category }) => category === key);
        for (const r of categoryMatches) {
          r.isEnable = false;
        }

        promptStates.set([...all]);
      });
    }
  }

  customElements.define(`category-area`, CategoryArea);
</script>

<style>
  category-area {
    padding: 1rem;
    background-color: rgb(var(--background-sub));
    border-radius: 1rem;
    display: flex;
    flex-flow: column nowrap;
    gap: 0.8rem;
  }

  .prompts {
    display: flex;
    flex-flow: row wrap;
    gap: 0.5rem;
  }

  header {
    display: flex;
    flex-flow: row wrap;
    gap: 1rem;
  }

  h2 {
    font-size: 1.5rem;
  }

  button {
    padding: 0.4rem;
    border-radius: 9999px;
  }
</style>

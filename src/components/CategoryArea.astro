---
import { uITree, type Category } from "../libs/prompts-store";
import ParentPrompt from "./ParentPrompt.astro";
import PromptButton from "./PromptButton.astro";
import ColorButton from "./ColorButton.astro";
import Button from "./Button.astro";

interface Props {
  name: string;
  category: Category;
}

const { name, category } = Astro.props;
---

<category-area data-category={category}>
  <header>
    <h2>{name}</h2>
    <Button class="clear-button">Clear</Button>
  </header>
  <div class="prompts">
    {
      uITree[category].map((leaf) => {
        switch (leaf.type) {
          case `parent-prompt`:
            return (
              <ParentPrompt category={category} parentPrompt={leaf.prompt} />
            );
          case `color-parent`:
            return <ColorButton colorCategory={leaf.colorCategory} />;
          case `child-prompt`:
            return (
              <PromptButton prompt={leaf.prompt}>{leaf.prompt}</PromptButton>
            );
        }
      })
    }
  </div>
</category-area>

<script>
  import {
    promptEnableInfoStore,
    type Category,
    queryAllPromptsByCategory,
  } from "../libs/prompts-store";

  class CategoryArea extends HTMLElement {
    constructor() {
      super();

      const category = this.dataset.category as Category;

      const clearButton = this.querySelector(
        `:scope > header > .clear-button`,
      )!;

      clearButton.addEventListener(`click`, () => {
        const prompts = queryAllPromptsByCategory(category);
        for (const prompt of prompts) {
          promptEnableInfoStore.setKey(prompt, false);
        }
      });
    }
  }

  customElements.define(`category-area`, CategoryArea);
</script>

<style>
  category-area {
    padding: 1rem;
    background-color: rgb(var(--background-sub));
    border-radius: 1rem;

    display: flex;
    flex-flow: column nowrap;
    gap: 0.8rem;
  }

  .prompts {
    display: grid;
    gap: 1rem;
    grid-template-columns: repeat(auto-fit, minmax(12rem, 1fr));
    grid-auto-flow: row dense;
  }

  header {
    display: flex;
    flex-flow: row wrap;
    gap: 1rem;
  }

  h2 {
    font-size: 1.5rem;
  }

  .hide {
    display: none;
  }
</style>
